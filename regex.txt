================================
常用元字符
. 匹配除换行符以外的任意字符
\w 匹配字母或数字或下划线或汉字
\s 匹配任意的空白符
\d 匹配数字
\b 匹配单词的开始或结束
^  匹配字符串开始 / shell 匹配行首
$  匹配字符串结束 / shell 匹配行尾
上述元字符改成大写就取补集

================================
在替换字符串中，&代表搜索字符串（正则表达式）所匹配的值
s/[0-9][0-9]*/NN&NN/

================================
匹配元字符和\本身必须转义

================================
* 重复零次或更多次
+ 重复一次或更多次
? 重复零次或一次
{n} 重复n次
{n,} 重复n次或更多次
{n,m} 重复n到m次
在vim中除了*之外都得在前面加上\

================================
匹配没有预定义的元字符集合[]
例如：[a-z0-9A-Z_]

================================
分支条件 |
\d{5}-\d{4}|\d{5}这个表达式用于匹配美国的邮政编码。美国邮编的规则是5位数字，或者用连字号间隔的9位数字。
注意顺序，反过来就不对了

================================
分组()用于实现重复多个子表达式
(\d{1,3}\.){3}\d{1,3}是一个简单的IP地址匹配表达式
转义圆括号可以嵌套使用，有圆括号和没圆括号的正则表达式是一样的

================================
后向引用
带组名的分组语法 (?<name>exp) 用\k<name>捕获
\b(?<Word>\w+)\b\s+\k<Word>\b 用于匹配重复的单词比如go go

================================
反义
\W 匹配任意不是字母，数字，下划线，汉字的字符
\S 匹配没有预定义的元字符集合配任意不是空白符的字符
\D 匹配任意非数字的字符
\B 匹配不是单词开头或结束的位置
[^x] 匹配除了x以外的任意字符
[^aeiou] 匹配除了aeiou这几个字母以外的任意字符

================================
(?=exp)也叫零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp
    比如\b\w+(?=ing\b)，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，
    先行断言的执行步骤是这样的先从要匹配的字符串中的最右端找到第一个 ing (
也就是先行断言中的表达式)然后 再匹配其前面的表达式，若无法匹配则继续查找第
二个 ing 再匹配第二个 ing 前面的字符串，若能匹配则匹配，符合正则的贪婪性

(?<=exp)也叫零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式exp
    比如(?<=\bre)\w+\b会匹配以re开头的单词的后半部分(除了re以外的部分)
    后发断言跟先行断言恰恰相反 它的执行步骤是这样的：先从要匹配的字符串中的
最左端找到第一个abc(也就是先行断言中的表达式)然后 再匹配其后面的表达式，若
无法匹配则继续查找第二个 abc 再匹配第二个 abc 后面的字符串，若能匹配则匹配。

零宽度负预测先行断言(?!exp)，断言此位置的后面不能匹配表达式exp。

零宽度负回顾后发断言(?<!exp)，断言此位置的前面不能匹配表达式exp

vim 中的零宽断言将 ? 换成 \@ 即可

================================
贪婪与懒惰
通常遵循贪婪法则，比如abacb匹配a.*b的结果是 aabbb

*? 重复任意次，但尽可能少重复
+? 重复1次或更多次，但尽可能少重复
?? 重复0次或1次，但尽可能少重复
{n,m}? 重复n到m次，但尽可能少重复
{n,}? 重复n次以上，但尽可能少重复

vim 中的非贪婪匹配
a.\{-}b 匹配 ababab 有三个结果
vim 中的贪婪匹配
a.*b 匹配 ababab 有一个结果
